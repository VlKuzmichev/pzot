<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd">


    <context:property-placeholder location="classpath:db/postgres.properties" system-properties-mode="OVERRIDE"/>
    <import resource="spring-security.xml"/>

    <bean id="dataSource"
          class="org.springframework.jdbc.datasource.DriverManagerDataSource"
          p:driverClassName="org.postgresql.Driver"
          p:url="${database.url}"
          p:username="${database.username}"
          p:password="${database.password}"/>

    <!--    <jee:jndi-lookup id="dataSource" jndi-name="java:comp/env/jdbc/upor"/> -->
        <context:property-placeholder location="classpath:db/tomcat.properties" system-properties-mode="OVERRIDE"/>

    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"
          p:dataSource-ref="dataSource"
          p:packagesToScan="rzd.oao.zrw.**.model">
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" p:showSql="${jpa.showSql}">
            </bean>
        </property>
        <property name="jpaPropertyMap">
            <map>
                <entry key="#{T(org.hibernate.cfg.AvailableSettings).FORMAT_SQL}" value="${hibernate.format_sql}"/>
                <entry key="#{T(org.hibernate.cfg.AvailableSettings).USE_SQL_COMMENTS}"
                       value="${hibernate.use_sql_comments}"/>
                <!--                &lt;!&ndash; Using Hibernate cache if necessary-->
<!--                <entry key="#{T(org.hibernate.cfg.AvailableSettings).CACHE_REGION_FACTORY}"-->
<!--                       value="org.hibernate.cache.jcache.internal.JCacheRegionFactory"/>-->
<!--                <entry key="#{T(org.hibernate.cache.jcache.ConfigSettings).PROVIDER}"-->
<!--                       value="org.ehcache.jsr107.EhcacheCachingProvider"/>-->
<!--                <entry key="#{T(org.hibernate.cfg.AvailableSettings).USE_SECOND_LEVEL_CACHE}" value="true"/>-->
<!--                <entry key="#{T(org.hibernate.cfg.AvailableSettings).USE_QUERY_CACHE}" value="false"/> &ndash;&gt;&lt;!&ndash;default&ndash;&gt;-->

<!--&lt;!&ndash;                <entry key="javax.persistence.validation.group.pre-persist" value="rzd.oao.zrw.upor.View$Persist"/>-->
<!--                <entry key="javax.persistence.validation.group.pre-update" value="rzd.oao.zrw.upor.View$Persist"/> &ndash;&gt;-->

            </map>
        </property>

    </bean>
    <!-- Scan components annotations -->
    <context:component-scan base-package="rzd.oao.zrw.**.repository"/>
    <context:component-scan base-package="rzd.oao.zrw.**.service"/>
<!--    <context:component-scan base-package="rzd.oao.zrw.**.web"/> -->

    <jpa:repositories base-package="rzd.oao.zrw.**.repository"/>

    <tx:annotation-driven/>
    <!-- Transaction manager for a single JPA EntityManagerFactory (alternative to JTA) -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager"
          p:entityManagerFactory-ref="entityManagerFactory"/>
    <!-- For Tests with Hibernate Cache, using if necessary
    <bean class="rzd.zrw.upor.repository.JpaUtil"/>  -->

</beans>